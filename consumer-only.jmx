<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Only Consumes from Kafka" enabled="true">
      <stringProp name="TestPlan.comments">Sample test plan for pepper-box to test the consumption of Kafka topics.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kafka Testing Configuration Settings" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="bootstrap.servers" elementType="Argument">
            <stringProp name="Argument.name">bootstrap.servers</stringProp>
            <stringProp name="Argument.value">${__P(bootstrap.servers,localhost:9092)}</stringProp>
            <stringProp name="Argument.desc">One or more of the Kafka nodes as per https://docs.confluent.io/current/kafka-rest/docs/config.html</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="zookeeper.servers" elementType="Argument">
            <stringProp name="Argument.name">zookeeper.servers</stringProp>
            <stringProp name="Argument.value">${__P(zookeeper.servers,localhost:2181)}</stringProp>
            <stringProp name="Argument.desc">One or more Zookeeper servers as per https://docs.confluent.io/current/kafka-rest/docs/config.html</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topic.prefix" elementType="Argument">
            <stringProp name="Argument.name">topic.prefix</stringProp>
            <stringProp name="Argument.value">${__P(topic.prefix,)}</stringProp>
            <stringProp name="Argument.desc">Optional prefix used by the consumer</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topic" elementType="Argument">
            <stringProp name="Argument.name">topic</stringProp>
            <stringProp name="Argument.value">${__P(topic, pepperbox-test)}</stringProp>
            <stringProp name="Argument.desc">The name of the topic to use. Where per-thread topics are enabled this will be used as the prefix</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threadz" elementType="Argument">
            <stringProp name="Argument.name">threadz</stringProp>
            <stringProp name="Argument.value">${__P(threadz, 5)}</stringProp>
            <stringProp name="Argument.desc">The number of threads to use for each thread group. It will use a command-line setting if one is provided.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterationz" elementType="Argument">
            <stringProp name="Argument.name">iterationz</stringProp>
            <stringProp name="Argument.value">${__P(iterationz, 7)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Numbr of iterations for each Producer thread</stringProp>
          </elementProp>
          <elementProp name="message.placeholder.key" elementType="Argument">
            <stringProp name="Argument.name">message.placeholder.key</stringProp>
            <stringProp name="Argument.value">${__P(message.placeholder.key, JSON450)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Selects which message generator to use</stringProp>
          </elementProp>
          <elementProp name="security.protocol" elementType="Argument">
            <stringProp name="Argument.name">security.protocol</stringProp>
            <stringProp name="Argument.value">${__P(security.protocol, PLAINTEXT)}</stringProp>
            <stringProp name="Argument.desc">Set as per https://docs.confluent.io/current/kafka-rest/docs/config.html</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sasl.jaas.username" elementType="Argument">
            <stringProp name="Argument.name">sasl.jaas.username</stringProp>
            <stringProp name="Argument.value">${__P(sasl.jaas.username, user)}</stringProp>
            <stringProp name="Argument.desc">This needs to match the server&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sasl.jaas.password" elementType="Argument">
            <stringProp name="Argument.name">sasl.jaas.password</stringProp>
            <stringProp name="Argument.value">${__P(sasl.jaas.password, password)}</stringProp>
            <stringProp name="Argument.desc">This needs to match the server&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sasl.mechanism" elementType="Argument">
            <stringProp name="Argument.name">sasl.mechanism</stringProp>
            <stringProp name="Argument.value">${__P(sasl.mechanism, PLAIN)}</stringProp>
            <stringProp name="Argument.desc">This needs to match the server&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssl.enabled.protocols" elementType="Argument">
            <stringProp name="Argument.name">ssl.enabled.protocols</stringProp>
            <stringProp name="Argument.value">TLSv1.2</stringProp>
            <stringProp name="Argument.desc">This needs to match the server&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssl.truststore.location" elementType="Argument">
            <stringProp name="Argument.name">ssl.truststore.location</stringProp>
            <stringProp name="Argument.value">${__P(ssl.truststore.location,)}</stringProp>
            <stringProp name="Argument.desc">This needs to match the server&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssl.truststore.password" elementType="Argument">
            <stringProp name="Argument.name">ssl.truststore.password</stringProp>
            <stringProp name="Argument.value">${__P(ssl.truststore.password,)}</stringProp>
            <stringProp name="Argument.desc">This needs to match your client&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssl.truststore.type" elementType="Argument">
            <stringProp name="Argument.name">ssl.truststore.type</stringProp>
            <stringProp name="Argument.value">JKS</stringProp>
            <stringProp name="Argument.desc">This needs to match your client&apos;s configuration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="generate.per-thread.topics" elementType="Argument">
            <stringProp name="Argument.name">generate.per-thread.topics</stringProp>
            <stringProp name="Argument.value">YES</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create a distinct topic name per thread</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These variables will be used by both producer and consumer</stringProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Kafka Consumers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threadz}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1516631128000</longProp>
        <longProp name="ThreadGroup.end_time">1516631128000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${consumer_index}</stringProp>
          <stringProp name="filename">./src/groovyscripts/kafka-consumer-timestamp.groovy</stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script"></stringProp>
        </JSR223Sampler>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Consumer Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">consumer_index</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
